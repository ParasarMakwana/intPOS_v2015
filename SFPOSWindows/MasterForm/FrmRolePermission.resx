<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QFWvFhhIoYmtkUyjyPjrD3+e+sUOhF94KbPRkckSbKOGtxXwcS9q0Uxp01LI1AdGH7mt6vcZWKKjKT0M
        288tX8IgvrshtKtylARJ3G+7lTNCOxDA+iDmxQkpRLTP14ifVY3cPJNTKxScsVkDBpGrMWM0jOIS3Au+
        D8hNbz2AziKpmsw+ChnDYWec9VVwP0qy1YZObjLsdlh+BlAgl9u6xn9qgSrmSPUKemm5vq471/kJi6AL
        mY84BJ3oS5ZPaUofx5lRBouyPyz7fmlCTL9KYCOrLDz4FXDyheXUwt2KwpmbdodG8NtzWT1L4qxh+iHZ
        0oTx0PnLstmdL7kXM32BCgVp39JZwIG8z6M7tPkK7Wp2s+/x+3OEsnrKirWa6YaQmyP9cqeB6YZQoVRh
        GLO7/yGoUmqZNAlpGsxHM5AdZiOup55gejrQ02+wDNT7YYz/YGp5EKreUs2BjTi/T6aoul2rQCHfo8dH
        bnPC7+TBkMfN9gEtdIyJVbbonqh/bzP8j2Be/Z1urLFRxvlWbG7Uwv4x5DJmZaTwt+L/WwR57krp/Hwb
        Tz02LK9wqe1Xx/8TLF42WobCNhk309zFTQNiG2+hSCeLz/W6zMTfnZa7Q//JPPUA8x3i/4Eim4oukSZh
        G7SLYIpsXI1vkOXMf8iITLHgVRl56v5Wdm5xkLZblVc10gx2WjITzFKZ/xDZwnrRNHBXynjaTuTam50Y
        crnUyMtkG/qrm/w1ROXKnFyXi3r3cLDWdFwC1Trvbwvo7DbYiUnbJbq/o+e/E31Sp60fXJ6U95L1TRMf
        WUTZ+iFSAPQlxXZCC0BfVvubI+78qJWgDjrKibAxXrCSmSzTFSTQsOL/RUQNkBWmVOsFst1uf1+PfFGd
        CdsPfP+eeoTpCFIAcr/m/2aRnpRUcembMn3jJ+jyRpB3C1DAEW+zDI34F5EGtfBofNKTAAAAAElFTkSu
        QmCC
</value>
  </data>
</root>